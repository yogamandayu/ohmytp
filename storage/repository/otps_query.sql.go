// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: otps_query.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const findOtpByID = `-- name: FindOtpByID :one
SELECT id,
       request_id,
       route_type,
       code,
       purpose,
       requested_at,
       confirmed_at,
       expired_at,
       attempt,
       last_attempt_at,
       resend_attempt,
       resend_at,
       ip_address,
       user_agent,
       created_at,
       updated_at
FROM public.otps
WHERE id = $1
`

type FindOtpByIDRow struct {
	ID            string
	RequestID     string
	RouteType     pgtype.Text
	Code          pgtype.Text
	Purpose       pgtype.Text
	RequestedAt   pgtype.Timestamptz
	ConfirmedAt   pgtype.Timestamptz
	ExpiredAt     pgtype.Timestamptz
	Attempt       pgtype.Int2
	LastAttemptAt pgtype.Timestamptz
	ResendAttempt pgtype.Int2
	ResendAt      pgtype.Timestamptz
	IpAddress     pgtype.Text
	UserAgent     pgtype.Text
	CreatedAt     pgtype.Timestamptz
	UpdatedAt     pgtype.Timestamptz
}

func (q *Queries) FindOtpByID(ctx context.Context, id string) (FindOtpByIDRow, error) {
	row := q.db.QueryRow(ctx, findOtpByID, id)
	var i FindOtpByIDRow
	err := row.Scan(
		&i.ID,
		&i.RequestID,
		&i.RouteType,
		&i.Code,
		&i.Purpose,
		&i.RequestedAt,
		&i.ConfirmedAt,
		&i.ExpiredAt,
		&i.Attempt,
		&i.LastAttemptAt,
		&i.ResendAttempt,
		&i.ResendAt,
		&i.IpAddress,
		&i.UserAgent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findOtpByRequestID = `-- name: FindOtpByRequestID :one
SELECT id,
       request_id,
       route_type,
       code,
       purpose,
       requested_at,
       confirmed_at,
       expired_at,
       attempt,
       last_attempt_at,
       resend_attempt,
       resend_at,
       ip_address,
       user_agent,
       created_at,
       updated_at
FROM public.otps
WHERE request_id = $1
`

type FindOtpByRequestIDRow struct {
	ID            string
	RequestID     string
	RouteType     pgtype.Text
	Code          pgtype.Text
	Purpose       pgtype.Text
	RequestedAt   pgtype.Timestamptz
	ConfirmedAt   pgtype.Timestamptz
	ExpiredAt     pgtype.Timestamptz
	Attempt       pgtype.Int2
	LastAttemptAt pgtype.Timestamptz
	ResendAttempt pgtype.Int2
	ResendAt      pgtype.Timestamptz
	IpAddress     pgtype.Text
	UserAgent     pgtype.Text
	CreatedAt     pgtype.Timestamptz
	UpdatedAt     pgtype.Timestamptz
}

func (q *Queries) FindOtpByRequestID(ctx context.Context, requestID string) (FindOtpByRequestIDRow, error) {
	row := q.db.QueryRow(ctx, findOtpByRequestID, requestID)
	var i FindOtpByRequestIDRow
	err := row.Scan(
		&i.ID,
		&i.RequestID,
		&i.RouteType,
		&i.Code,
		&i.Purpose,
		&i.RequestedAt,
		&i.ConfirmedAt,
		&i.ExpiredAt,
		&i.Attempt,
		&i.LastAttemptAt,
		&i.ResendAttempt,
		&i.ResendAt,
		&i.IpAddress,
		&i.UserAgent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const saveOtp = `-- name: SaveOtp :one
INSERT INTO public.otps (id, request_id, route_type, code,
                         purpose, requested_at, confirmed_at, expired_at,
                         attempt, last_attempt_at,
                         resend_attempt, resend_at,
                         ip_address, user_agent,
                         created_at, updated_at)
VALUES ($1, $2, $3, $4,
        $5, $6, $7,
        $8, $9, $10, $11,
        $12, $13, $14,
        NOW(), NOW()) RETURNING id, row_id, request_id, route_type, code, purpose, requested_at, confirmed_at, expired_at, attempt, last_attempt_at, resend_attempt, resend_at, ip_address, user_agent, created_at, updated_at, is_deleted, deleted_at
`

type SaveOtpParams struct {
	ID            string
	RequestID     string
	RouteType     pgtype.Text
	Code          pgtype.Text
	Purpose       pgtype.Text
	RequestedAt   pgtype.Timestamptz
	ConfirmedAt   pgtype.Timestamptz
	ExpiredAt     pgtype.Timestamptz
	Attempt       pgtype.Int2
	LastAttemptAt pgtype.Timestamptz
	ResendAttempt pgtype.Int2
	ResendAt      pgtype.Timestamptz
	IpAddress     pgtype.Text
	UserAgent     pgtype.Text
}

func (q *Queries) SaveOtp(ctx context.Context, arg SaveOtpParams) (Otp, error) {
	row := q.db.QueryRow(ctx, saveOtp,
		arg.ID,
		arg.RequestID,
		arg.RouteType,
		arg.Code,
		arg.Purpose,
		arg.RequestedAt,
		arg.ConfirmedAt,
		arg.ExpiredAt,
		arg.Attempt,
		arg.LastAttemptAt,
		arg.ResendAttempt,
		arg.ResendAt,
		arg.IpAddress,
		arg.UserAgent,
	)
	var i Otp
	err := row.Scan(
		&i.ID,
		&i.RowID,
		&i.RequestID,
		&i.RouteType,
		&i.Code,
		&i.Purpose,
		&i.RequestedAt,
		&i.ConfirmedAt,
		&i.ExpiredAt,
		&i.Attempt,
		&i.LastAttemptAt,
		&i.ResendAttempt,
		&i.ResendAt,
		&i.IpAddress,
		&i.UserAgent,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
		&i.DeletedAt,
	)
	return i, err
}

const updateOtp = `-- name: UpdateOtp :one
UPDATE public.otps
SET request_id      = $2,
    route_type      = $3,
    code            = $4,
    purpose         = $5,
    requested_at    = $6,
    confirmed_at    = $7,
    expired_at      = $8,
    attempt         = $9,
    last_attempt_at = $10,
    resend_attempt  = $11,
    resend_at       = $12,
    ip_address      = $13,
    user_agent      = $14,
    updated_at      = NOW()
WHERE id = $1 RETURNING id, request_id, route_type, code,
                         purpose, requested_at, confirmed_at, expired_at,
                         attempt, last_attempt_at,
                         resend_attempt, resend_at,
                         ip_address, user_agent,
                         created_at, updated_at
`

type UpdateOtpParams struct {
	ID            string
	RequestID     string
	RouteType     pgtype.Text
	Code          pgtype.Text
	Purpose       pgtype.Text
	RequestedAt   pgtype.Timestamptz
	ConfirmedAt   pgtype.Timestamptz
	ExpiredAt     pgtype.Timestamptz
	Attempt       pgtype.Int2
	LastAttemptAt pgtype.Timestamptz
	ResendAttempt pgtype.Int2
	ResendAt      pgtype.Timestamptz
	IpAddress     pgtype.Text
	UserAgent     pgtype.Text
}

type UpdateOtpRow struct {
	ID            string
	RequestID     string
	RouteType     pgtype.Text
	Code          pgtype.Text
	Purpose       pgtype.Text
	RequestedAt   pgtype.Timestamptz
	ConfirmedAt   pgtype.Timestamptz
	ExpiredAt     pgtype.Timestamptz
	Attempt       pgtype.Int2
	LastAttemptAt pgtype.Timestamptz
	ResendAttempt pgtype.Int2
	ResendAt      pgtype.Timestamptz
	IpAddress     pgtype.Text
	UserAgent     pgtype.Text
	CreatedAt     pgtype.Timestamptz
	UpdatedAt     pgtype.Timestamptz
}

func (q *Queries) UpdateOtp(ctx context.Context, arg UpdateOtpParams) (UpdateOtpRow, error) {
	row := q.db.QueryRow(ctx, updateOtp,
		arg.ID,
		arg.RequestID,
		arg.RouteType,
		arg.Code,
		arg.Purpose,
		arg.RequestedAt,
		arg.ConfirmedAt,
		arg.ExpiredAt,
		arg.Attempt,
		arg.LastAttemptAt,
		arg.ResendAttempt,
		arg.ResendAt,
		arg.IpAddress,
		arg.UserAgent,
	)
	var i UpdateOtpRow
	err := row.Scan(
		&i.ID,
		&i.RequestID,
		&i.RouteType,
		&i.Code,
		&i.Purpose,
		&i.RequestedAt,
		&i.ConfirmedAt,
		&i.ExpiredAt,
		&i.Attempt,
		&i.LastAttemptAt,
		&i.ResendAttempt,
		&i.ResendAt,
		&i.IpAddress,
		&i.UserAgent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
