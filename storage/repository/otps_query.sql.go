// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: otps_query.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const findOtp = `-- name: FindOtp :one
SELECT id,
       request_id,
       identifier,
       route_type,
       code,
       purpose,
       requested_at,
       confirmed_at,
       expired_at,
       attempt,
       last_attempt_at,
       resend_attempt,
       resend_at,
       ip_address,
       user_agent,
       created_at,
       updated_at
FROM public.otps
WHERE id = $1
`

type FindOtpRow struct {
	ID            string
	RequestID     string
	Identifier    pgtype.Text
	RouteType     pgtype.Text
	Code          pgtype.Text
	Purpose       pgtype.Text
	RequestedAt   pgtype.Timestamptz
	ConfirmedAt   pgtype.Timestamptz
	ExpiredAt     pgtype.Timestamptz
	Attempt       pgtype.Int2
	LastAttemptAt pgtype.Timestamptz
	ResendAttempt pgtype.Int2
	ResendAt      pgtype.Timestamptz
	IpAddress     pgtype.Text
	UserAgent     pgtype.Text
	CreatedAt     pgtype.Timestamptz
	UpdatedAt     pgtype.Timestamptz
}

func (q *Queries) FindOtp(ctx context.Context, id string) (FindOtpRow, error) {
	row := q.db.QueryRow(ctx, findOtp, id)
	var i FindOtpRow
	err := row.Scan(
		&i.ID,
		&i.RequestID,
		&i.Identifier,
		&i.RouteType,
		&i.Code,
		&i.Purpose,
		&i.RequestedAt,
		&i.ConfirmedAt,
		&i.ExpiredAt,
		&i.Attempt,
		&i.LastAttemptAt,
		&i.ResendAttempt,
		&i.ResendAt,
		&i.IpAddress,
		&i.UserAgent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findOtpByIdentifierAndPurpose = `-- name: FindOtpByIdentifierAndPurpose :one
SELECT id,
       request_id,
       identifier,
       route_type,
       code,
       purpose,
       requested_at,
       confirmed_at,
       expired_at,
       attempt,
       last_attempt_at,
       resend_attempt,
       resend_at,
       ip_address,
       user_agent,
       created_at,
       updated_at
FROM public.otps
WHERE identifier = $1
  AND purpose = $2
`

type FindOtpByIdentifierAndPurposeParams struct {
	Identifier pgtype.Text
	Purpose    pgtype.Text
}

type FindOtpByIdentifierAndPurposeRow struct {
	ID            string
	RequestID     string
	Identifier    pgtype.Text
	RouteType     pgtype.Text
	Code          pgtype.Text
	Purpose       pgtype.Text
	RequestedAt   pgtype.Timestamptz
	ConfirmedAt   pgtype.Timestamptz
	ExpiredAt     pgtype.Timestamptz
	Attempt       pgtype.Int2
	LastAttemptAt pgtype.Timestamptz
	ResendAttempt pgtype.Int2
	ResendAt      pgtype.Timestamptz
	IpAddress     pgtype.Text
	UserAgent     pgtype.Text
	CreatedAt     pgtype.Timestamptz
	UpdatedAt     pgtype.Timestamptz
}

func (q *Queries) FindOtpByIdentifierAndPurpose(ctx context.Context, arg FindOtpByIdentifierAndPurposeParams) (FindOtpByIdentifierAndPurposeRow, error) {
	row := q.db.QueryRow(ctx, findOtpByIdentifierAndPurpose, arg.Identifier, arg.Purpose)
	var i FindOtpByIdentifierAndPurposeRow
	err := row.Scan(
		&i.ID,
		&i.RequestID,
		&i.Identifier,
		&i.RouteType,
		&i.Code,
		&i.Purpose,
		&i.RequestedAt,
		&i.ConfirmedAt,
		&i.ExpiredAt,
		&i.Attempt,
		&i.LastAttemptAt,
		&i.ResendAttempt,
		&i.ResendAt,
		&i.IpAddress,
		&i.UserAgent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const saveOtp = `-- name: SaveOtp :one
INSERT INTO public.otps (id, request_id, identifier, route_type, code,
                         purpose, requested_at, confirmed_at, expired_at,
                         attempt, last_attempt_at,
                         resend_attempt, resend_at,
                         ip_address, user_agent,
                         created_at, updated_at)
VALUES ($1, $2, $3, $4,
        $5, $6, $7,
        $8, $9, $10, $11,
        $12, $13, $14, $15,
        NOW(), NOW()) RETURNING id, row_id, request_id, identifier, route_type, code, purpose, requested_at, confirmed_at, expired_at, attempt, last_attempt_at, resend_attempt, resend_at, ip_address, user_agent, created_at, updated_at, is_deleted, deleted_at
`

type SaveOtpParams struct {
	ID            string
	RequestID     string
	Identifier    pgtype.Text
	RouteType     pgtype.Text
	Code          pgtype.Text
	Purpose       pgtype.Text
	RequestedAt   pgtype.Timestamptz
	ConfirmedAt   pgtype.Timestamptz
	ExpiredAt     pgtype.Timestamptz
	Attempt       pgtype.Int2
	LastAttemptAt pgtype.Timestamptz
	ResendAttempt pgtype.Int2
	ResendAt      pgtype.Timestamptz
	IpAddress     pgtype.Text
	UserAgent     pgtype.Text
}

func (q *Queries) SaveOtp(ctx context.Context, arg SaveOtpParams) (Otp, error) {
	row := q.db.QueryRow(ctx, saveOtp,
		arg.ID,
		arg.RequestID,
		arg.Identifier,
		arg.RouteType,
		arg.Code,
		arg.Purpose,
		arg.RequestedAt,
		arg.ConfirmedAt,
		arg.ExpiredAt,
		arg.Attempt,
		arg.LastAttemptAt,
		arg.ResendAttempt,
		arg.ResendAt,
		arg.IpAddress,
		arg.UserAgent,
	)
	var i Otp
	err := row.Scan(
		&i.ID,
		&i.RowID,
		&i.RequestID,
		&i.Identifier,
		&i.RouteType,
		&i.Code,
		&i.Purpose,
		&i.RequestedAt,
		&i.ConfirmedAt,
		&i.ExpiredAt,
		&i.Attempt,
		&i.LastAttemptAt,
		&i.ResendAttempt,
		&i.ResendAt,
		&i.IpAddress,
		&i.UserAgent,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
		&i.DeletedAt,
	)
	return i, err
}

const updateOtp = `-- name: UpdateOtp :one
UPDATE public.otps
SET request_id      = $2,
    identifier      = $3,
    route_type      = $4,
    code            = $5,
    purpose         = $6,
    requested_at    = $7,
    confirmed_at    = $8,
    expired_at      = $9,
    attempt         = $10,
    last_attempt_at = $11,
    resend_attempt  = $12,
    resend_at       = $13,
    ip_address      = $14,
    user_agent      = $15,
    updated_at      = NOW()
WHERE id = $1 RETURNING id, request_id, identifier, route_type, code,
                         purpose, requested_at, confirmed_at, expired_at,
                         attempt, last_attempt_at,
                         resend_attempt, resend_at,
                         ip_address, user_agent,
                         created_at, updated_at
`

type UpdateOtpParams struct {
	ID            string
	RequestID     string
	Identifier    pgtype.Text
	RouteType     pgtype.Text
	Code          pgtype.Text
	Purpose       pgtype.Text
	RequestedAt   pgtype.Timestamptz
	ConfirmedAt   pgtype.Timestamptz
	ExpiredAt     pgtype.Timestamptz
	Attempt       pgtype.Int2
	LastAttemptAt pgtype.Timestamptz
	ResendAttempt pgtype.Int2
	ResendAt      pgtype.Timestamptz
	IpAddress     pgtype.Text
	UserAgent     pgtype.Text
}

type UpdateOtpRow struct {
	ID            string
	RequestID     string
	Identifier    pgtype.Text
	RouteType     pgtype.Text
	Code          pgtype.Text
	Purpose       pgtype.Text
	RequestedAt   pgtype.Timestamptz
	ConfirmedAt   pgtype.Timestamptz
	ExpiredAt     pgtype.Timestamptz
	Attempt       pgtype.Int2
	LastAttemptAt pgtype.Timestamptz
	ResendAttempt pgtype.Int2
	ResendAt      pgtype.Timestamptz
	IpAddress     pgtype.Text
	UserAgent     pgtype.Text
	CreatedAt     pgtype.Timestamptz
	UpdatedAt     pgtype.Timestamptz
}

func (q *Queries) UpdateOtp(ctx context.Context, arg UpdateOtpParams) (UpdateOtpRow, error) {
	row := q.db.QueryRow(ctx, updateOtp,
		arg.ID,
		arg.RequestID,
		arg.Identifier,
		arg.RouteType,
		arg.Code,
		arg.Purpose,
		arg.RequestedAt,
		arg.ConfirmedAt,
		arg.ExpiredAt,
		arg.Attempt,
		arg.LastAttemptAt,
		arg.ResendAttempt,
		arg.ResendAt,
		arg.IpAddress,
		arg.UserAgent,
	)
	var i UpdateOtpRow
	err := row.Scan(
		&i.ID,
		&i.RequestID,
		&i.Identifier,
		&i.RouteType,
		&i.Code,
		&i.Purpose,
		&i.RequestedAt,
		&i.ConfirmedAt,
		&i.ExpiredAt,
		&i.Attempt,
		&i.LastAttemptAt,
		&i.ResendAttempt,
		&i.ResendAt,
		&i.IpAddress,
		&i.UserAgent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateOtpAttempt = `-- name: UpdateOtpAttempt :one
UPDATE public.otps
SET attempt         = $2,
    last_attempt_at = $3,
    confirmed_at    = $4,
    updated_at      = NOW()
WHERE id = $1 RETURNING id, request_id, identifier, route_type, code,
                         purpose, requested_at, confirmed_at, expired_at,
                         attempt, last_attempt_at,
                         resend_attempt, resend_at,
                         ip_address, user_agent,
                         created_at, updated_at
`

type UpdateOtpAttemptParams struct {
	ID            string
	Attempt       pgtype.Int2
	LastAttemptAt pgtype.Timestamptz
	ConfirmedAt   pgtype.Timestamptz
}

type UpdateOtpAttemptRow struct {
	ID            string
	RequestID     string
	Identifier    pgtype.Text
	RouteType     pgtype.Text
	Code          pgtype.Text
	Purpose       pgtype.Text
	RequestedAt   pgtype.Timestamptz
	ConfirmedAt   pgtype.Timestamptz
	ExpiredAt     pgtype.Timestamptz
	Attempt       pgtype.Int2
	LastAttemptAt pgtype.Timestamptz
	ResendAttempt pgtype.Int2
	ResendAt      pgtype.Timestamptz
	IpAddress     pgtype.Text
	UserAgent     pgtype.Text
	CreatedAt     pgtype.Timestamptz
	UpdatedAt     pgtype.Timestamptz
}

func (q *Queries) UpdateOtpAttempt(ctx context.Context, arg UpdateOtpAttemptParams) (UpdateOtpAttemptRow, error) {
	row := q.db.QueryRow(ctx, updateOtpAttempt,
		arg.ID,
		arg.Attempt,
		arg.LastAttemptAt,
		arg.ConfirmedAt,
	)
	var i UpdateOtpAttemptRow
	err := row.Scan(
		&i.ID,
		&i.RequestID,
		&i.Identifier,
		&i.RouteType,
		&i.Code,
		&i.Purpose,
		&i.RequestedAt,
		&i.ConfirmedAt,
		&i.ExpiredAt,
		&i.Attempt,
		&i.LastAttemptAt,
		&i.ResendAttempt,
		&i.ResendAt,
		&i.IpAddress,
		&i.UserAgent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
