// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: otps_query.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const findOtp = `-- name: FindOtp :one
SELECT id, request_id, route_type, code, requested_at, confirmed_at, expired_at, attempt, last_attempt_at, resend_attempt, resend_at, ip_address, user_agent, created_at, updated_at, deleted_at FROM public.otps
WHERE id = $1
`

func (q *Queries) FindOtp(ctx context.Context, id string) (Otp, error) {
	row := q.db.QueryRow(ctx, findOtp, id)
	var i Otp
	err := row.Scan(
		&i.ID,
		&i.RequestID,
		&i.RouteType,
		&i.Code,
		&i.RequestedAt,
		&i.ConfirmedAt,
		&i.ExpiredAt,
		&i.Attempt,
		&i.LastAttemptAt,
		&i.ResendAttempt,
		&i.ResendAt,
		&i.IpAddress,
		&i.UserAgent,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getOtps = `-- name: GetOtps :many
SELECT id, request_id, route_type, code, requested_at, confirmed_at, expired_at, attempt, last_attempt_at, resend_attempt, resend_at, ip_address, user_agent, created_at, updated_at, deleted_at FROM public.otps
ORDER BY created_at desc
`

func (q *Queries) GetOtps(ctx context.Context) ([]Otp, error) {
	rows, err := q.db.Query(ctx, getOtps)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Otp
	for rows.Next() {
		var i Otp
		if err := rows.Scan(
			&i.ID,
			&i.RequestID,
			&i.RouteType,
			&i.Code,
			&i.RequestedAt,
			&i.ConfirmedAt,
			&i.ExpiredAt,
			&i.Attempt,
			&i.LastAttemptAt,
			&i.ResendAttempt,
			&i.ResendAt,
			&i.IpAddress,
			&i.UserAgent,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveOtp = `-- name: SaveOtp :one
INSERT INTO public.otps (
    id, request_id, route_type, code,
    requested_at, confirmed_at, expired_at,
    attempt, last_attempt_at,
    resend_attempt, resend_at,
    ip_address, user_agent,
    created_at, updated_at
)
VALUES (
           $1, $2, $3, $4,
           $5, $6, $7,
           $8, $9, $10, $11,
           $12, $13,
           $14, $15
       )
    RETURNING id, request_id, route_type, code, requested_at, confirmed_at, expired_at, attempt, last_attempt_at, resend_attempt, resend_at, ip_address, user_agent, created_at, updated_at, deleted_at
`

type SaveOtpParams struct {
	ID            string
	RequestID     string
	RouteType     pgtype.Text
	Code          pgtype.Text
	RequestedAt   pgtype.Timestamptz
	ConfirmedAt   pgtype.Timestamptz
	ExpiredAt     pgtype.Timestamptz
	Attempt       pgtype.Int2
	LastAttemptAt pgtype.Timestamptz
	ResendAttempt pgtype.Int2
	ResendAt      pgtype.Timestamptz
	IpAddress     pgtype.Text
	UserAgent     pgtype.Text
	CreatedAt     pgtype.Timestamptz
	UpdatedAt     pgtype.Timestamptz
}

func (q *Queries) SaveOtp(ctx context.Context, arg SaveOtpParams) (Otp, error) {
	row := q.db.QueryRow(ctx, saveOtp,
		arg.ID,
		arg.RequestID,
		arg.RouteType,
		arg.Code,
		arg.RequestedAt,
		arg.ConfirmedAt,
		arg.ExpiredAt,
		arg.Attempt,
		arg.LastAttemptAt,
		arg.ResendAttempt,
		arg.ResendAt,
		arg.IpAddress,
		arg.UserAgent,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Otp
	err := row.Scan(
		&i.ID,
		&i.RequestID,
		&i.RouteType,
		&i.Code,
		&i.RequestedAt,
		&i.ConfirmedAt,
		&i.ExpiredAt,
		&i.Attempt,
		&i.LastAttemptAt,
		&i.ResendAttempt,
		&i.ResendAt,
		&i.IpAddress,
		&i.UserAgent,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
