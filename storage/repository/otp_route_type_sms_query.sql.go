// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: otp_route_type_sms_query.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const findOtpRouteTypeSMS = `-- name: FindOtpRouteTypeSMS :one
SELECT id, otp_id, request_id, phone, created_at, updated_at, is_deleted, deleted_at FROM public.otp_route_type_sms
WHERE id = $1
`

func (q *Queries) FindOtpRouteTypeSMS(ctx context.Context, id string) (OtpRouteTypeSm, error) {
	row := q.db.QueryRow(ctx, findOtpRouteTypeSMS, id)
	var i OtpRouteTypeSm
	err := row.Scan(
		&i.ID,
		&i.OtpID,
		&i.RequestID,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
		&i.DeletedAt,
	)
	return i, err
}

const getOtpRouteTypeSMS = `-- name: GetOtpRouteTypeSMS :many
SELECT id, otp_id, request_id, phone, created_at, updated_at, is_deleted, deleted_at FROM public.otp_route_type_sms
ORDER BY created_at desc
`

func (q *Queries) GetOtpRouteTypeSMS(ctx context.Context) ([]OtpRouteTypeSm, error) {
	rows, err := q.db.Query(ctx, getOtpRouteTypeSMS)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OtpRouteTypeSm
	for rows.Next() {
		var i OtpRouteTypeSm
		if err := rows.Scan(
			&i.ID,
			&i.OtpID,
			&i.RequestID,
			&i.Phone,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveOtpRouteTypeSMS = `-- name: SaveOtpRouteTypeSMS :one
INSERT INTO public.otp_route_type_sms (
    id, otp_id, request_id, phone,
    created_at, updated_at
)
VALUES (
           $1, $2, $3, $4,
           NOW(), NOW()
       )
    RETURNING id, otp_id, request_id, phone, created_at, updated_at, is_deleted, deleted_at
`

type SaveOtpRouteTypeSMSParams struct {
	ID        string
	OtpID     string
	RequestID string
	Phone     pgtype.Text
}

func (q *Queries) SaveOtpRouteTypeSMS(ctx context.Context, arg SaveOtpRouteTypeSMSParams) (OtpRouteTypeSm, error) {
	row := q.db.QueryRow(ctx, saveOtpRouteTypeSMS,
		arg.ID,
		arg.OtpID,
		arg.RequestID,
		arg.Phone,
	)
	var i OtpRouteTypeSm
	err := row.Scan(
		&i.ID,
		&i.OtpID,
		&i.RequestID,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
		&i.DeletedAt,
	)
	return i, err
}

const updateOtpRouteTypeSMS = `-- name: UpdateOtpRouteTypeSMS :one
UPDATE public.otp_route_type_sms SET
    otp_id = $2, request_id = $3, phone = $4,
    updated_at = NOW()
WHERE id = $1
    RETURNING id, otp_id, request_id, phone, created_at, updated_at, is_deleted, deleted_at
`

type UpdateOtpRouteTypeSMSParams struct {
	ID        string
	OtpID     string
	RequestID string
	Phone     pgtype.Text
}

func (q *Queries) UpdateOtpRouteTypeSMS(ctx context.Context, arg UpdateOtpRouteTypeSMSParams) (OtpRouteTypeSm, error) {
	row := q.db.QueryRow(ctx, updateOtpRouteTypeSMS,
		arg.ID,
		arg.OtpID,
		arg.RequestID,
		arg.Phone,
	)
	var i OtpRouteTypeSm
	err := row.Scan(
		&i.ID,
		&i.OtpID,
		&i.RequestID,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
		&i.DeletedAt,
	)
	return i, err
}
